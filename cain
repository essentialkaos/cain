#!/usr/bin/env bash
# shellcheck disable=SC1117,SC2034,SC2154

########################################################################################

if [[ -n "${SCRIPT_DEBUG}" ]] ; then
  set -x
fi

########################################################################################

APP="CAIN"
VER="1.0.2"
DESC="Simple tool for GitHub cache invalidation"

########################################################################################

NORM=0
BOLD=1
UNLN=4
RED=31
GREEN=32
YELLOW=33
BLUE=34
MAG=35
CYAN=36
GREY=37
DARK=90

CL_NORM="\e[0m"
CL_BOLD="\e[0;${BOLD};49m"
CL_UNLN="\e[0;${UNLN};49m"
CL_RED="\e[0;${RED};49m"
CL_GREEN="\e[0;${GREEN};49m"
CL_YELLOW="\e[0;${YELLOW};49m"
CL_BLUE="\e[0;${BLUE};49m"
CL_MAG="\e[0;${MAG};49m"
CL_CYAN="\e[0;${CYAN};49m"
CL_GREY="\e[0;${GREY};49m"
CL_DARK="\e[0;${DARK};49m"
CL_BL_RED="\e[1;${RED};49m"
CL_BL_GREEN="\e[1;${GREEN};49m"
CL_BL_YELLOW="\e[1;${YELLOW};49m"
CL_BL_BLUE="\e[1;${BLUE};49m"
CL_BL_MAG="\e[1;${MAG};49m"
CL_BL_CYAN="\e[1;${CYAN};49m"
CL_BL_GREY="\e[1;${GREY};49m"

########################################################################################

EC_OK=0
EC_ERROR=1

# Link extraction regex (String)
PARSING_REGEX="https:\/\/camo\.githubusercontent\.com\/[a-f0-9\/]{1,}"

########################################################################################

SUPPORTED_OPTS="!no_colors !help !version"
SHORT_OPTS="nc:!no_colors h:!help v:!version"

########################################################################################

# Main function
#
# *: All unparsed arguments
#
# Code: No
# Echo: No
main() {
  if [[ -n "$no_color" || -n "$NO_COLOR" ]] || [[ ! -c /dev/stdout && -z $FAKETTY ]] ; then
    unset NORM BOLD CL_ITLC UNLN RED GREEN YELLOW BLUE MAG CYAN GREY DARK
    unset CL_NORM CL_BOLD CL_UNLN CL_RED CL_GREEN CL_YELLOW CL_BLUE CL_MAG CL_CYAN CL_GREY CL_DARK
    unset CL_BL_RED CL_BL_GREEN CL_BL_YELLOW CL_BL_BLUE CL_BL_MAG CL_BL_CYAN CL_BL_GREY CL_IT_DARK
    no_color=true
  fi

  if [[ -n "$version" ]] ; then
    about
    exit $EC_OK
  fi

  if [[ -n "$help" || $# -eq 0 ]] ; then
    usage
    exit $EC_OK
  fi

  if ! isAppInstalled "curl" ; then
    error "This utility requires curl" $RED
    exit $EC_ERROR
  fi

  invalidate "$1"
}

# Run invalidation
#
# 1: URL (String)
#
# Code: No
# Echo: No
invalidate() {
  local url="$1"

  if [[ "$url" =~ github\.com ]] ; then
    ivalidateAll "$url"
  elif [[ "$url" =~ githubusercontent\.com ]] ; then
    ivalidateImage "$url"
  else
    error "Given URL unsupported" $RED
    exit $EC_ERROR
  fi
}

# Download webpage and invalidate all images on this webpage
#
# 1: URL (String)
#
# Code: No
# Echo: No
ivalidateAll() {
  local url="$1"
  local img_url

  showm "${CL_BOLD}Invalidation:${CL_NORM} "

  while read -r img_url ; do
    invalidateCache "$img_url"
    printStatusBullet $?
  done < <(curl -s "$url" 2>/dev/null | grep -Eo "$PARSING_REGEX")

  show ""
}

# Invalidate image
#
# 1: URL (String)
#
# Code: No
# Echo: No
ivalidateImage() {
  local url="$1"

  showm "${CL_BOLD}Invalidation:${CL_NORM} "

  invalidateCache "$url"
  printStatusBullet $?

  show ""
}

# Send PURGE request to given URL
#
# 1: URL (String)
#
# Code: No
# Echo: No
invalidateCache() {
  local url="$1"

  if curl -s -X PURGE "$url" 2>/dev/null | grep -q '"ok"' ; then
    return 0
  fi

  return 1
}

# Print status bullet
#
# 1: Status (Number)
#
# Code: No
# Echo: No
printStatusBullet() {
  if [[ $1 -eq 0 ]] ; then
    showm "${CL_GREEN}•${CL_NORM}"
  else
    showm "${CL_RED}•${CL_NORM}"
  fi
}

# Checks if app is installed
#
# 1: Binary name
#
# Code: Yes
# Echo: No
isAppInstalled() {
  type -P "$1" &> /dev/null
  return $?
}

########################################################################################

# Show message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
show() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e "\e[${2}m${1}\e[0m"
  else
    echo -e "$*"
  fi
}

# Print message without new line symbol
#
# 1: Message (String)
# 2: Color (Number) [Optional]
#
# Code: No
# Echo: No
showm() {
  if [[ -n "$2" && -z "$no_colors" ]] ; then
    echo -e -n "\e[${2}m${1}\e[0m"
  else
    echo -e -n "$*"
  fi
}

# Print error message
#
# 1: Message (String)
# 2: Message color (Number) [Optional]
#
# Code: No
# Echo: No
error() {
  show "$@" 1>&2
}

# Print usage info
#
# Code: No
# Echo: No
usage() {
  show ""
  show "${CL_BOLD}Usage:${CL_NORM} cain ${CL_GREEN}{options}${CL_NORM} url"
  show ""
  show "Options" $BOLD
  show ""
  if [[ -n "$DARK" ]] ; then
    show "  ${CL_GREEN}--no-color, -nc${CL_NORM} ${CL_DARK}..${CL_NORM} Disable colors in output"
    show "  ${CL_GREEN}--help, -h${CL_NORM} ${CL_DARK}.......${CL_NORM} Show this help message"
    show "  ${CL_GREEN}--version, -v${CL_NORM} ${CL_DARK}....${CL_NORM} Show information about version"
  else
    show "  ${CL_GREEN}--no-color, -nc${CL_NORM}    Disable colors in output"
    show "  ${CL_GREEN}--help, -h${CL_NORM}         Show this help message"
    show "  ${CL_GREEN}--version, -v${CL_NORM}      Show information about version"
  fi
  show ""
  show "Examples" $BOLD
  show ""
  show "  cain https://camo.githubusercontent.com/abcdabcbd1abcd528abcd18acdb1ba31bad"
  show "  Invalidate cache for one image" $DARK
  show ""
  show "  cain https://github.com/owner/repo/blob/master/README.md"
  show "  Invalidate all images on given page" $DARK
  show ""
}

# Show info about version
#
# Code: No
# Echo: No
about() {
  show ""
  show "${CL_BL_CYAN}$APP${CL_NORM} ${CL_CYAN}$VER${CL_NORM} - $DESC"
  show ""
  show "Copyright (C) 2009-$(date +%Y) ESSENTIAL KAOS" $DARK
  show "Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>" $DARK
  show ""
}

# Show warning message about unsupported option
#
# 1: Option name (String)
#
# Code: No
# Echo: No
showOptWarn() {
  error "Unknown option $1" $RED
  exit 1
}

## OPTIONS PARSING 5 ###########################################################

if [[ $# -eq 0 ]] ; then
  main
fi

unset opt optn optm optv optt optk

optv="$*" ; optt=""

while [[ -n "$1" ]] ; do
  if [[ "$1" =~ \  && -n "$optn" ]] ; then
    declare "$optn=$1"

    unset optn && shift && continue
  elif [[ $1 =~ ^-{1}[a-zA-Z0-9]{1,2}+.*$ ]] ; then
    optm=${1:1}

    if [[ \ $SHORT_OPTS\  =~ \ $optm:!?([a-zA-Z0-9_]*) ]] ; then
      opt="${BASH_REMATCH[1]}"
    else
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ -z "$optn" ]] ; then
      optn=$opt
    else
      # shellcheck disable=SC2015
      [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
      optn=$opt
    fi

    if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
      declare -F showOptWarn &>/dev/null && showOptWarn "-$optm"
      shift && continue
    fi

    if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
      declare "$optn=true" ; unset optn ; optk=true
    else
      unset optk
    fi

    shift && continue
  elif [[ "$1" =~ ^-{2}[a-zA-Z]{1}[a-zA-Z0-9_-]+.*$ ]] ; then
    opt=${1:2}

    if [[ $opt == *=* ]] ; then
      IFS="=" read -ra opt <<< "$opt"

      optm="${opt[0]}" ; optm=${optm//-/_}

      if [[ ! $SUPPORTED_OPTS\  =~ $optm\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${opt[0]//_/-}"
        shift && continue
      fi

      # shellcheck disable=SC2015
      [[ -n "${!optm}" && $MERGEABLE_OPTS\  =~ $optm\  ]] && declare "$optm=${!optm} ${opt[*]:1:99}" || declare "$optm=${opt[*]:1:99}"

      unset optm && shift && continue
    else
      # shellcheck disable=SC2178
      opt=${opt//-/_}

      if [[ -z "$optn" ]] ; then
        # shellcheck disable=SC2128
        optn=$opt
      else
        # shellcheck disable=SC2015
        [[ -z "$optk" ]] && ( declare -F showOptValWarn &>/dev/null && showOptValWarn "--$optn" ) || declare "$optn=true"
        # shellcheck disable=SC2128
        optn=$opt
      fi

      if [[ ! $SUPPORTED_OPTS\  =~ !?$optn\  ]] ; then
        declare -F showOptWarn &>/dev/null && showOptWarn "--${optn//_/-}"
        shift && continue
      fi

      if [[ ${BASH_REMATCH[0]:0:1} == "!" ]] ; then
        declare "$optn=true" ; unset optn ; optk=true
      else
        unset optk
      fi

      shift && continue
    fi
  else
    if [[ -n "$optn" ]] ; then
      # shellcheck disable=SC2015
      [[ -n "${!optn}" && $MERGEABLE_OPTS\  =~ $optn\  ]] && declare "$optn=${!optn} $1" || declare "$optn=$1"

      unset optn && shift && continue
    fi
  fi

  optt="$optt $1" ; shift
done

[[ -n "$optn" ]] && declare "$optn=true"

unset opt optn optm optk

# shellcheck disable=SC2015,SC2086
[[ -n "$KEEP_OPTS" ]] && main $optv || main ${optt:1}

################################################################################
